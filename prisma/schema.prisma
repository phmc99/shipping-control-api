generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  DELIVERYMAN
  ADMIN
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String
  cpf      String   @unique
  password String
  role     UserRole @default(CUSTOMER)

  questions     Question[]
  answers       Answer[]
  comment       Comment[]
  notifications Notification[]

  sentDeliveries DeliveryOrder[] @relation("UserToSent")
  receivedOrders DeliveryOrder[] @relation("UserToRecipient")

  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")

  author      User         @relation(fields: [authorId], references: [id])
  bestAnswer  Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answers     Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String    @map("question_id")

  author       User         @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  question     Question     @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])
  author   User      @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

model DeliveryOrder {
  id              String         @id @default(uuid())
  trackingCode    String         @unique
  deliveryManId   String
  recipientId     String
  status          DeliveryStatus @default(PENDING)
  pickupAddress   String
  deliveryAddress String
  deliveryDate    DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  deliveryMan User            @relation("UserToSent", fields: [deliveryManId], references: [id])
  recipient   User?           @relation("UserToRecipient", fields: [recipientId], references: [id])
  images      DeliveryImage[]

  @@map("delivery_orders")
}

model DeliveryImage {
  id              String   @id @default(uuid())
  deliveryOrderId String
  imageUrl        String
  uploadedAt      DateTime @default(now())

  deliveryOrder DeliveryOrder @relation(fields: [deliveryOrderId], references: [id], onDelete: Cascade)

  @@map("delivery_order_images")
}
